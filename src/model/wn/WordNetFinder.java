// Demo basic WordNet functionalitypackage wn;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Set;import net.didion.jwnl.JWNLException;import net.didion.jwnl.data.IndexWord;import net.didion.jwnl.data.POS;import net.didion.jwnl.data.PointerType;import net.didion.jwnl.data.Synset;import net.didion.jwnl.data.Word;import net.didion.jwnl.data.relationship.Relationship;public class WordNetFinder {	Set<String> cacheRel = new HashSet<String>();	public WordNetFinder() {		String filePath = WordNetFinder.class.getClassLoader().getResource("file_properties.xml").getPath();		WordNetHelper.initialize(filePath);		//WordNetHelper.initialize("file_properties.xml");	}    public static void main(String[] args) throws JWNLException {    	WordNetFinder wordNetFinder = new WordNetFinder();        System.out.println(wordNetFinder.isWNRelation("good","well"));    }            public boolean isWNRelation(String tagStart, String tagSecond) {		if (cacheRel.contains(tagStart+"_"+tagSecond) || cacheRel.contains(tagSecond+"_"+tagStart)) {			//System.out.println("into the cache wordnet ");			return true;		}    	    	boolean rel = false;    	boolean sim = false;    	try {			 rel = findRelationships(tagStart,tagSecond);			 sim = findSimilars(tagStart,tagSecond);		} catch (JWNLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		boolean result = (rel || sim);		if (!result) {			cacheRel.add(tagStart+"_"+tagSecond);		}    	return result;    }                    private boolean findRelationships(String tagStart, String tagSecond) throws JWNLException {    	boolean relationFound = false;    	Set<String> synon = new HashSet<String>();        POS[] pos = WordNetHelper.getPOS(tagStart);        if (pos.length > 0) {            for (int i = 0; i < pos.length; i++) {            	IndexWord start = WordNetHelper.getWord(pos[i], tagStart);                IndexWord end = WordNetHelper.getWord(pos[i], tagSecond);                if (start!=null && end!=null) {                	synon = findRelationshipsDemo(start,end,PointerType.SIMILAR_TO);        				}                if (!synon.isEmpty()&& synon.contains(tagSecond)) {                	relationFound = true;        		}            }                    }		return relationFound;    }            /**     * @param tagStart     * @param tagSecond     * @return     * @throws JWNLException     */    private boolean findSimilars(String tagStart, String tagSecond) throws JWNLException {    	boolean relationFound = false;    	Set<String> synon = new HashSet<String>();    	IndexWord ww = null;        POS[] pos = WordNetHelper.getPOS(tagStart);        if (pos.length > 0) {            for (int i = 0; i < pos.length; i++) {            	ww = WordNetHelper.getWord(pos[i], tagStart);            	synon = findRelatedWords(ww,PointerType.SIMILAR_TO);            	            }        }                if (!synon.isEmpty()&& synon.contains(tagSecond)) {        	relationFound = true;		}		return relationFound;    }            /**     * @param start     * @param end     * @param type     * @return     * @throws JWNLException     */    public static Set<String> findRelationshipsDemo(IndexWord start, IndexWord end, PointerType type) throws JWNLException {    	Set<String> synon = new HashSet<String>();    	Relationship rel = WordNetHelper.getRelationship(start, end, type);        if (rel != null) {//            // Display depth//            System.out.println("The depth of this relationship is: " + rel.getDepth());//            System.out.println("Here is how the words are related: ");//            // Get a list of the words that make up the relationship            ArrayList a = WordNetHelper.getRelationshipSenses(rel);            //System.out.println("Start: " + start.getLemma());            for (int i = 0; i < a.size(); i++) {                Synset s = (Synset) a.get(i);                Word[] words = s.getWords();                //System.out.print(i + ": ");                for (int j = 0; j < words.length; j++ ) {                	synon.add(words[j].getLemma());//                    System.out.print(words[j].getLemma());//                    if (j != words.length-1) System.out.print(", ");                }//                System.out.println();            }        }		return synon;    }                   // This function lists related words of type of relation for a given word    /**     * @param w     * @param type     * @return     * @throws JWNLException     */    private static Set<String> findRelatedWords(IndexWord w, PointerType type) throws JWNLException {    	Set<String> synon = new HashSet<String>();    	List<Synset> a = (List<Synset>)WordNetHelper.getRelated(w,type);    	if (a!=null) {	    	if (a.isEmpty()) {	    	//	System.out.println("Hmmm, I didn't find any related words.");	    	} else {	    		for (int i = 0; i < a.size(); i++) {	    			Synset s = (Synset) a.get(i);	    			Word[] words = s.getWords();	    			for (int j = 0; j < words.length; j++ ) {	    				synon.add(words[j].getLemma());//	    				System.out.print(words[j].getLemma());//	    				if (j != words.length-1) System.out.print(" ");	    			}//	    			System.out.println();	    		}	    	}    	}		return synon;    }}